{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.0","prelude":{"crate_id":{"name":"synstructure","disambiguator":[7624134892539560879,8595597822164389760]},"crate_root":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src","external_crates":[{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3553663098714602502,2731168586675101358]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[12970504350400890307,1330893484546042390]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[18238482591647973474,11418725596096400016]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[10619361481199040116,6454769724444199782]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[13194368514008818735,3052037997273331152]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[2554053202278876504,1549753963475713010]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14246274702587774733,6804986143756607514]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[5302351722848579955,16392675360026913209]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[6070995072695948059,3135430851129305136]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":10,"id":{"name":"proc_macro","disambiguator":[8966711332631018147,757571531647092748]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":11,"id":{"name":"syntax","disambiguator":[5054591319912838610,4093842610510117093]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":12,"id":{"name":"bitflags","disambiguator":[5127343498685020804,8092538524319398903]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":13,"id":{"name":"serialize","disambiguator":[10386012968294897744,17889428574219714904]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":14,"id":{"name":"smallvec","disambiguator":[3096812118595573284,1946554384890304792]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":15,"id":{"name":"unreachable","disambiguator":[3723627018638731361,2393336923333647089]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":16,"id":{"name":"void","disambiguator":[17036689495738079457,7627434331325408660]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":17,"id":{"name":"log","disambiguator":[12604459780435543978,10571164485502193664]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":18,"id":{"name":"cfg_if","disambiguator":[1584710967468398443,3348622408656944636]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":19,"id":{"name":"rustc_errors","disambiguator":[4664176087932310047,7088353949949808256]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":20,"id":{"name":"atty","disambiguator":[4057454445159456708,13580785078544346948]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":21,"id":{"name":"libc","disambiguator":[11433483139227360172,8828178455064017415]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":22,"id":{"name":"termcolor","disambiguator":[7911595079160591485,11884628478633061770]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":23,"id":{"name":"rustc_data_structures","disambiguator":[8806234850264466659,9129714119057335468]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":24,"id":{"name":"ena","disambiguator":[14576729665606981721,7859887825289930982]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":25,"id":{"name":"parking_lot","disambiguator":[3974396693069530491,12756959632322354179]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":26,"id":{"name":"lock_api","disambiguator":[18397141731531558271,4822090611010175316]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":27,"id":{"name":"scopeguard","disambiguator":[3803105582853804660,2218156283721911487]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":28,"id":{"name":"owning_ref","disambiguator":[8890952105247962360,18265637398073245866]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":29,"id":{"name":"stable_deref_trait","disambiguator":[119022608917752551,4655603875317841062]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":30,"id":{"name":"parking_lot_core","disambiguator":[2085516097649262181,12189334895304533469]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":31,"id":{"name":"rand","disambiguator":[13789299499760114227,12487997211661595038]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":32,"id":{"name":"rand_core","disambiguator":[278377959468902417,16631198943953864551]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":33,"id":{"name":"rustc_rayon","disambiguator":[14132942461760365631,6367405900265784570]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":34,"id":{"name":"rustc_rayon_core","disambiguator":[1653075351907787638,6806513843151536534]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":35,"id":{"name":"crossbeam_deque","disambiguator":[10893721272280729279,5448982255740908685]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":36,"id":{"name":"crossbeam_epoch","disambiguator":[9501881916036326682,6900726334530842323]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":37,"id":{"name":"nodrop","disambiguator":[11123174342395459239,10707956870645269790]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":38,"id":{"name":"arrayvec","disambiguator":[15859722363302161927,5414766784925760714]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":39,"id":{"name":"crossbeam_utils","disambiguator":[10578940339412169977,10290597688095677736]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":40,"id":{"name":"lazy_static","disambiguator":[5291789966405092343,3140264025888722576]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":41,"id":{"name":"memoffset","disambiguator":[11666615964943242302,17058549256336281268]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":42,"id":{"name":"num_cpus","disambiguator":[14996702038569186868,2982332618601938499]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":43,"id":{"name":"rand","disambiguator":[16291904370900539380,7109423477561962876]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":44,"id":{"name":"either","disambiguator":[539448528686876054,15910257144799049400]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":45,"id":{"name":"rustc_hash","disambiguator":[5442684589064907257,4115062588809688196]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":46,"id":{"name":"byteorder","disambiguator":[6734655999115166774,7888526164543426521]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":47,"id":{"name":"rustc_cratesio_shim","disambiguator":[15364312676796909106,14484469087478316722]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":48,"id":{"name":"unicode_width","disambiguator":[8505114308636679849,10958093087455225528]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":49,"id":{"name":"syntax_pos","disambiguator":[8339214349020995781,389349436773858228]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":50,"id":{"name":"arena","disambiguator":[4654060747265740647,16694704431132555167]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":51,"id":{"name":"scoped_tls","disambiguator":[11283445261830114918,2638379576037438114]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":52,"id":{"name":"rustc_target","disambiguator":[7311314373086495430,1569653717406604754]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":53,"id":{"name":"proc_macro2","disambiguator":[11885782987049862982,11763860345014211385]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":54,"id":{"name":"unicode_xid","disambiguator":[17428628831313580871,4218506541758218765]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":55,"id":{"name":"quote","disambiguator":[13788990824862095264,15269461190255729435]}},{"file_name":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","num":56,"id":{"name":"syn","disambiguator":[14316568506413727741,8723598199276462757]}}],"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":73267,"line_start":1,"line_end":2236,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5855,"byte_end":5856,"line_start":183,"line_end":183,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"quote, quote_spanned, ToTokens","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":56,"index":2856},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":73552,"byte_end":73561,"line_start":6,"line_end":6,"column_start":15,"column_end":24},"alias_span":null,"name":"parse_str","value":"","parent":{"krate":0,"index":76}},{"kind":"Use","ref_id":{"krate":56,"index":2852},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":73563,"byte_end":73568,"line_start":6,"line_end":6,"column_start":26,"column_end":31},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":76}},{"kind":"Use","ref_id":{"krate":56,"index":9496},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":73570,"byte_end":73581,"line_start":6,"line_end":6,"column_start":33,"column_end":44},"alias_span":null,"name":"DeriveInput","value":"","parent":{"krate":0,"index":76}},{"kind":"Use","ref_id":{"krate":10,"index":586},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":73604,"byte_end":73615,"line_start":7,"line_end":7,"column_start":21,"column_end":32},"alias_span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":73619,"byte_end":73630,"line_start":7,"line_end":7,"column_start":36,"column_end":47},"name":"TokenStream","value":"","parent":{"krate":0,"index":76}},{"kind":"Use","ref_id":{"krate":53,"index":1072},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":73653,"byte_end":73664,"line_start":8,"line_end":8,"column_start":22,"column_end":33},"alias_span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":73668,"byte_end":73680,"line_start":8,"line_end":8,"column_start":37,"column_end":49},"name":"TokenStream2","value":"","parent":{"krate":0,"index":76}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":73267,"line_start":1,"line_end":2236,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":62},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":224},{"krate":0,"index":244},{"krate":0,"index":242},{"krate":0,"index":238},{"krate":0,"index":234},{"krate":0,"index":230},{"krate":0,"index":226},{"krate":0,"index":94},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":248},{"krate":0,"index":268},{"krate":0,"index":264},{"krate":0,"index":258},{"krate":0,"index":254},{"krate":0,"index":250},{"krate":0,"index":106},{"krate":0,"index":110},{"krate":0,"index":272},{"krate":0,"index":294},{"krate":0,"index":292},{"krate":0,"index":288},{"krate":0,"index":282},{"krate":0,"index":278},{"krate":0,"index":274},{"krate":0,"index":298},{"krate":0,"index":318},{"krate":0,"index":314},{"krate":0,"index":308},{"krate":0,"index":304},{"krate":0,"index":300},{"krate":0,"index":118},{"krate":0,"index":128},{"krate":0,"index":322},{"krate":0,"index":342},{"krate":0,"index":338},{"krate":0,"index":332},{"krate":0,"index":328},{"krate":0,"index":324},{"krate":0,"index":158},{"krate":0,"index":222}],"decl_id":null,"docs":" This crate provides helper types for matching against enum variants, and\n extracting bindings to each of the fields in the deriving Struct or Enum in\n a generic way.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":76},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"/Users/blackanger/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.9.0/src/macros.rs","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92}],"decl_id":null,"docs":" This module provides two utility macros for testing custom derives. They can\n be used together to eliminate some of the boilerplate required in order to\n declare and test custom derive implementations.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":121},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6323,"byte_end":6327,"line_start":200,"line_end":200,"column_start":5,"column_end":9},"name":"Move","qualname":"::BindStyle::Move","value":"BindStyle::Move","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":" `x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":123},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6349,"byte_end":6356,"line_start":202,"line_end":202,"column_start":5,"column_end":12},"name":"MoveMut","qualname":"::BindStyle::MoveMut","value":"BindStyle::MoveMut","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":" `mut x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":125},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6378,"byte_end":6381,"line_start":204,"line_end":204,"column_start":5,"column_end":8},"name":"Ref","qualname":"::BindStyle::Ref","value":"BindStyle::Ref","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":" `ref x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":127},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6407,"byte_end":6413,"line_start":206,"line_end":206,"column_start":5,"column_end":11},"name":"RefMut","qualname":"::BindStyle::RefMut","value":"BindStyle::RefMut","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":" `ref mut x`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":224},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6295,"byte_end":6304,"line_start":198,"line_end":198,"column_start":10,"column_end":19},"name":"BindStyle","qualname":"::BindStyle","value":"BindStyle::{Move, MoveMut, Ref, RefMut}","parent":null,"children":[{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":127}],"decl_id":null,"docs":" The type of binding to use when generating a pattern.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6286,"byte_end":6416,"line_start":198,"line_end":207,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6286,"byte_end":6416,"line_start":198,"line_end":207,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":248},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9893,"byte_end":9904,"line_start":298,"line_end":298,"column_start":12,"column_end":23},"name":"BindingInfo","qualname":"::BindingInfo","value":"BindingInfo { binding, style }","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":141}],"decl_id":null,"docs":" Information about a specific binding. This contains both an `Ident`\n reference to the given field, and the syn `&'a Field` descriptor for that\n field.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9882,"byte_end":10235,"line_start":298,"line_end":310,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":133},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9973,"byte_end":9980,"line_start":300,"line_end":300,"column_start":9,"column_end":16},"name":"binding","qualname":"::BindingInfo::binding","value":"proc_macro2::Ident","parent":{"krate":0,"index":248},"children":[],"decl_id":null,"docs":" The name which this BindingInfo will bind to.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":135},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10062,"byte_end":10067,"line_start":303,"line_end":303,"column_start":9,"column_end":14},"name":"style","qualname":"::BindingInfo::style","value":"BindStyle","parent":{"krate":0,"index":248},"children":[],"decl_id":null,"docs":" The type of binding which this BindingInfo will create.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10521,"byte_end":10524,"line_start":321,"line_end":321,"column_start":12,"column_end":15},"name":"ast","qualname":"<BindingInfo<'a>>::ast","value":"fn (&self) -> &'a Field","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying `syn` AST node which this\n `BindingInfo` references\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11256,"byte_end":11259,"line_start":350,"line_end":350,"column_start":12,"column_end":15},"name":"pat","qualname":"<BindingInfo<'a>>::pat","value":"fn (&self) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generates the pattern fragment for this field binding.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12417,"byte_end":12437,"line_start":390,"line_end":390,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<BindingInfo<'a>>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are referenced in this\n field's type.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":272},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12899,"byte_end":12909,"line_start":400,"line_end":400,"column_start":12,"column_end":22},"name":"VariantAst","qualname":"::VariantAst","value":"VariantAst { attrs, ident, fields, discriminant }","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":159},{"krate":0,"index":161},{"krate":0,"index":163}],"decl_id":null,"docs":" This type is similar to `syn`'s `Variant` type, however each of the fields\n are references rather than owned. When this is used as the AST for a real\n variant, this struct simply borrows the fields of the `syn::Variant`,\n however this type may also be used as the sole variant for a struct.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12888,"byte_end":13056,"line_start":400,"line_end":405,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12888,"byte_end":13056,"line_start":400,"line_end":405,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":157},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12924,"byte_end":12929,"line_start":401,"line_end":401,"column_start":9,"column_end":14},"name":"attrs","qualname":"::VariantAst::attrs","value":"&'a [syn::Attribute]","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":159},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12956,"byte_end":12961,"line_start":402,"line_end":402,"column_start":9,"column_end":14},"name":"ident","qualname":"::VariantAst::ident","value":"&'a proc_macro2::Ident","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":161},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12982,"byte_end":12988,"line_start":403,"line_end":403,"column_start":9,"column_end":15},"name":"fields","qualname":"::VariantAst::fields","value":"&'a syn::Fields","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":163},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13010,"byte_end":13022,"line_start":404,"line_end":404,"column_start":9,"column_end":21},"name":"discriminant","qualname":"::VariantAst::discriminant","value":"&'a std::option::Option<(syn::token::Eq, syn::Expr)>","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":298},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13250,"byte_end":13261,"line_start":410,"line_end":410,"column_start":12,"column_end":23},"name":"VariantInfo","qualname":"::VariantInfo","value":"VariantInfo { prefix }","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":189}],"decl_id":null,"docs":" A wrapper around a `syn::DeriveInput`'s variant which provides utilities\n for destructuring `Variant`s with `match` expressions.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13239,"byte_end":13419,"line_start":410,"line_end":416,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":181},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13276,"byte_end":13282,"line_start":411,"line_end":411,"column_start":9,"column_end":15},"name":"prefix","qualname":"::VariantInfo::prefix","value":"std::option::Option<&'a proc_macro2::Ident>","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16340,"byte_end":16348,"line_start":498,"line_end":498,"column_start":12,"column_end":20},"name":"bindings","qualname":"<VariantInfo<'a>>::bindings","value":"fn (&self) -> &[BindingInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of the bindings in this Variant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16482,"byte_end":16494,"line_start":503,"line_end":503,"column_start":12,"column_end":24},"name":"bindings_mut","qualname":"<VariantInfo<'a>>::bindings_mut","value":"fn (&mut self) -> &mut [BindingInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mut slice of the bindings in this Variant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16723,"byte_end":16726,"line_start":509,"line_end":509,"column_start":12,"column_end":15},"name":"ast","qualname":"<VariantInfo<'a>>::ast","value":"fn (&self) -> VariantAst<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `VariantAst` object which contains references to the\n underlying `syn` AST node which this `Variant` was created from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16855,"byte_end":16871,"line_start":514,"line_end":514,"column_start":12,"column_end":28},"name":"omitted_bindings","qualname":"<VariantInfo<'a>>::omitted_bindings","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if any bindings were omitted due to a `filter` call.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17636,"byte_end":17639,"line_start":543,"line_end":543,"column_start":12,"column_end":15},"name":"pat","qualname":"<VariantInfo<'a>>::pat","value":"fn (&self) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generates the match-arm pattern which could be used to match against this Variant.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20051,"byte_end":20060,"line_start":619,"line_end":619,"column_start":12,"column_end":21},"name":"construct","qualname":"<VariantInfo<'a>>::construct","value":"fn <F, T> (&self, mut func: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generates the token stream required to construct the current variant.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22328,"byte_end":22332,"line_start":687,"line_end":687,"column_start":12,"column_end":16},"name":"each","qualname":"<VariantInfo<'a>>::each","value":"fn <F, R> (&self, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in a `BindingInfo`.\n and generating a `match` arm which evaluates the returned tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23790,"byte_end":23794,"line_start":735,"line_end":735,"column_start":12,"column_end":16},"name":"fold","qualname":"<VariantInfo<'a>>::fold","value":"fn <F, I, R> (&self, init: I, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in the\n result of the previous call, and a `BindingInfo`. generating a `match`\n arm which evaluates to the resulting tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25607,"byte_end":25613,"line_start":792,"line_end":792,"column_start":12,"column_end":18},"name":"filter","qualname":"<VariantInfo<'a>>::filter","value":"fn <F> (&mut self, f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the bindings created by this `Variant` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26035,"byte_end":26049,"line_start":809,"line_end":809,"column_start":12,"column_end":26},"name":"remove_binding","qualname":"<VariantInfo<'a>>::remove_binding","value":"fn (&mut self, idx: usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Remove the binding at the given index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27290,"byte_end":27299,"line_start":850,"line_end":850,"column_start":12,"column_end":21},"name":"bind_with","qualname":"<VariantInfo<'a>>::bind_with","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the `BindStyle` for each of the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28841,"byte_end":28853,"line_start":901,"line_end":901,"column_start":12,"column_end":24},"name":"binding_name","qualname":"<VariantInfo<'a>>::binding_name","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the binding name for each fo the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30085,"byte_end":30105,"line_start":942,"line_end":942,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<VariantInfo<'a>>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are referenced in this\n field's type.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":322},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30514,"byte_end":30523,"line_start":954,"line_end":954,"column_start":12,"column_end":21},"name":"Structure","qualname":"::Structure","value":"Structure {  }","parent":null,"children":[{"krate":0,"index":205},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":211}],"decl_id":null,"docs":" A wrapper around a `syn::DeriveInput` which provides utilities for creating\n custom derive trait implementations.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30503,"byte_end":30656,"line_start":954,"line_end":959,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30798,"byte_end":30801,"line_start":964,"line_end":964,"column_start":12,"column_end":15},"name":"new","qualname":"<Structure<'a>>::new","value":"fn (ast: &'a DeriveInput) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Structure` with the variants and fields from the passed-in\n `DeriveInput`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32984,"byte_end":32992,"line_start":1020,"line_end":1020,"column_start":12,"column_end":20},"name":"variants","qualname":"<Structure<'a>>::variants","value":"fn (&self) -> &[VariantInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of the variants in this Structure.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33128,"byte_end":33140,"line_start":1025,"line_end":1025,"column_start":12,"column_end":24},"name":"variants_mut","qualname":"<Structure<'a>>::variants_mut","value":"fn (&mut self) -> &mut [VariantInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mut slice of the variants in this Structure.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33335,"byte_end":33338,"line_start":1031,"line_end":1031,"column_start":12,"column_end":15},"name":"ast","qualname":"<Structure<'a>>::ast","value":"fn (&self) -> &'a DeriveInput","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying `syn` AST node which this\n `Structure` was created from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33477,"byte_end":33493,"line_start":1036,"line_end":1036,"column_start":12,"column_end":28},"name":"omitted_variants","qualname":"<Structure<'a>>::omitted_variants","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if any variants were omitted due to a `filter_variants` call.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34744,"byte_end":34748,"line_start":1076,"line_end":1076,"column_start":12,"column_end":16},"name":"each","qualname":"<Structure<'a>>::each","value":"fn <F, R> (&self, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in a `BindingInfo`.\n and generating `match` arms which evaluate the returned tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36364,"byte_end":36368,"line_start":1129,"line_end":1129,"column_start":12,"column_end":16},"name":"fold","qualname":"<Structure<'a>>::fold","value":"fn <F, I, R> (&self, init: I, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in the\n result of the previous call, and a `BindingInfo`. generating `match`\n arms which evaluate to the resulting tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":38018,"byte_end":38030,"line_start":1184,"line_end":1184,"column_start":12,"column_end":24},"name":"each_variant","qualname":"<Structure<'a>>::each_variant","value":"fn <F, R> (&self, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each variant, passing in a\n `VariantInfo`. and generating `match` arms which evaluate the returned\n tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":39907,"byte_end":39913,"line_start":1244,"line_end":1244,"column_start":12,"column_end":18},"name":"filter","qualname":"<Structure<'a>>::filter","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the bindings created by this `Structure` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":41334,"byte_end":41349,"line_start":1293,"line_end":1293,"column_start":12,"column_end":27},"name":"filter_variants","qualname":"<Structure<'a>>::filter_variants","value":"fn <F> (&mut self, f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the variants matched by this `Structure` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":41773,"byte_end":41787,"line_start":1310,"line_end":1310,"column_start":12,"column_end":26},"name":"remove_variant","qualname":"<Structure<'a>>::remove_variant","value":"fn (&mut self, idx: usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Remove the variant at the given index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":43016,"byte_end":43025,"line_start":1351,"line_end":1351,"column_start":12,"column_end":21},"name":"bind_with","qualname":"<Structure<'a>>::bind_with","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the `BindStyle` for each of the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44527,"byte_end":44539,"line_start":1402,"line_end":1402,"column_start":12,"column_end":24},"name":"binding_name","qualname":"<Structure<'a>>::binding_name","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the binding name for each fo the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45799,"byte_end":45819,"line_start":1445,"line_end":1445,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<Structure<'a>>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are refrenced in the types\n of non-filtered fields / variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47582,"byte_end":47598,"line_start":1498,"line_end":1498,"column_start":12,"column_end":28},"name":"add_impl_generic","qualname":"<Structure<'a>>::add_impl_generic","value":"fn (&mut self, param: GenericParam) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Adds an `impl<>` generic parameter.\n This can be used when the trait to be derived needs some extra generic parameters.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48085,"byte_end":48101,"line_start":1511,"line_end":1511,"column_start":12,"column_end":28},"name":"add_trait_bounds","qualname":"<Structure<'a>>::add_trait_bounds","value":"fn (&self, bound: &TraitBound, where_clause: &mut Option<WhereClause>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add trait bounds for a trait with the given path for each type parmaeter\n referenced in the types of non-filtered fields.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":52155,"byte_end":52165,"line_start":1622,"line_end":1622,"column_start":12,"column_end":22},"name":"bound_impl","qualname":"<Structure<'a>>::bound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":54758,"byte_end":54775,"line_start":1696,"line_end":1696,"column_start":12,"column_end":29},"name":"unsafe_bound_impl","qualname":"<Structure<'a>>::unsafe_bound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":56927,"byte_end":56939,"line_start":1760,"line_end":1760,"column_start":12,"column_end":24},"name":"unbound_impl","qualname":"<Structure<'a>>::unbound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":59125,"byte_end":59144,"line_start":1825,"line_end":1825,"column_start":12,"column_end":31},"name":"unsafe_unbound_impl","qualname":"<Structure<'a>>::unsafe_unbound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[{"value":"deprecated","span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":59100,"byte_end":59113,"line_start":1824,"line_end":1824,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":67328,"byte_end":67336,"line_start":2049,"line_end":2049,"column_start":12,"column_end":20},"name":"gen_impl","qualname":"<Structure<'a>>::gen_impl","value":"fn (&self, cfg: TokenStream) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generate an impl block for the given struct. This impl block will\n automatically use hygiene tricks to avoid polluting the caller's\n namespace, and will automatically add trait bounds for generic type\n parameters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":222},"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":72656,"byte_end":72670,"line_start":2215,"line_end":2215,"column_start":8,"column_end":22},"name":"unpretty_print","qualname":"::unpretty_print","value":"fn <T> (ts: T) -> String","parent":null,"children":[],"decl_id":null,"docs":" Dumps an unpretty version of a tokenstream. Takes any type which implements\n `Display`.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6436,"byte_end":6445,"line_start":209,"line_end":209,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10259,"byte_end":10270,"line_start":312,"line_end":312,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10387,"byte_end":10398,"line_start":318,"line_end":318,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13926,"byte_end":13942,"line_start":429,"line_end":429,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14939,"byte_end":14950,"line_start":462,"line_end":462,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30667,"byte_end":30676,"line_start":961,"line_end":961,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31996,"byte_end":32010,"line_start":989,"line_end":989,"column_start":38,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6168,"byte_end":6174,"line_start":194,"line_end":194,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":76}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6436,"byte_end":6445,"line_start":209,"line_end":209,"column_start":19,"column_end":28},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":224},"to":{"krate":55,"index":76}},{"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10259,"byte_end":10270,"line_start":312,"line_end":312,"column_start":23,"column_end":34},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":248},"to":{"krate":55,"index":76}},{"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10387,"byte_end":10398,"line_start":318,"line_end":318,"column_start":10,"column_end":21},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13926,"byte_end":13942,"line_start":429,"line_end":429,"column_start":28,"column_end":44},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":120},"to":{"krate":56,"index":2416}},{"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14939,"byte_end":14950,"line_start":462,"line_end":462,"column_start":10,"column_end":21},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30667,"byte_end":30676,"line_start":961,"line_end":961,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,98,108,97,99,107,97,110,103,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31996,"byte_end":32010,"line_start":989,"line_end":989,"column_start":38,"column_end":52},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":162},"to":{"krate":2,"index":1650}}]}